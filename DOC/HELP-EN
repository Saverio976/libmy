# MY LIB IN C
# Paradox
**I'm not a pro, plz don te judje mi!**


**Here are examples of how to recreate some of the library functions :**
- stdio
- string


####################################################################### Short list of functions :

# \\ # \\ # Theme 1: **conversion**


# int to str

char *my_inttostr(int number, char tab[]);
    int number
    char tab[]
converts a given 'number' parameter into an ascii string in the array.
and returns a pointer to the array


# str to int

int my_strtoint(char tab[]);
    char tab[]
converts a string containing only numbers into int.
and returns that number




# \\ # \\ # Theme 2: **number**


# power

unsigned long long int my_pow(int number, int exponent);
    int number
    int exponent
the choice for the type is made like that because, some calculation gives very large numbers
return 'number' exponent 'exponent'.




# \\ # \\ # Theme 3: **std.in.out**


# input strings
void my\_lecture(char tab[], int max_size);
    char tab[]
    int max_size
changes the char array given by the user in stdin
(similar to fgets because it only takes a defined number of characters)


# input character
void my_lecture_one(char *ptr_letter);
    char *ptr_letter
change the value pointed by 'ptr_letter' by a character entered in stdin


# print char
void print_char(char c);
    char c
displays a character in stdout


# print strings
void print_str(char \*tab);
    char tab[]
displays a string in stdout (a string must end in \\0)


# print int
void print_nb(int number);
    int number
displays a string (the int is transformed into an ascii character)


# print bonus
void print1(char *tab, void *ptr_parameter);
    char tab[]
    void *ptr_parameter
displays a string of characters, and if there is a
%s: takes the pointer as a pointer to a string and makes a print_str
%c: takes the pointer as a pointer to a character and makes a print_char
%d: takes the pointer as a pointer to a number and makes a print_nb
then continues the string




# \\ # \\ # Theme 4: **strings**


# str_cat
void my_strcat(char tab1[], char tab2[]);
    char tab1[]
    char tab2[]
concatenates the character string 'tab1' and 'tab2' into 'tab1'.


# str_chr
char *my_strchr(char tab[], char letter);
    char tab[]
    letter float
returns a pointer to the location of the indicated letter.
if there is none, return NULL


# str_cmp
int my_strcmp(char tab1[], char tab2[]);
    char tab1[]
    char tab2[]
compares two character strings
return 1 if the two channels are not the same, 0 if they are.


# str_cpy
void my_strcpy(char tab1[], char tab2[]);
    char tab1[]
    char tab2[]
copies the string 'tab2' to 'tab1'.



# str_len
int my_strlen(char tab[]);
    char tab[]
returns the length of the string (not including the \0)


# str_pbrk
char *my_strpbrk(char tab[], char letters[]){
    char tab[]
    char letters[]
returns a pointer to the first letter found between all those in 'letters'.
return NULL if not found


# str_rev
void my_strrev(char tab[]);
    char tab[]
reverses the order of the character string


# str_str
char *my_strstr(char tab1[], char tab2[]);
    char tab1[]
    char tab2[]
returns a pointer to the first letter of the occurrence 'tab2' to be searched in 'tab1'.
NULL referral if none exists




################################### Makefile

**1**
make help
display this document



**2**
make aide
diplay this document in french



**3**
make init
to create the library



**4**
make clean
if there are any .o files left



**5**
make hard_clean
to delete in addition to the .o (if any) the library



**6**
make use_libmy
Prerequisite:
-Replace the variable NAME\_OF\_THE\_PROG by the name of the file to be compiled with the libmy library.
this line can also show you how to compile with a custom library


#sorry for all the different translation problems
('cause i'm french) <3 (╯°□°）╯︵ ┻━┻
