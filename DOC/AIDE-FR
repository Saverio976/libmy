# MY LIB IN C
# Paradox
**Je ne suis pas un pro, plz don te judje mi!**


**Voici des exemples permettant de recréer certaines fonction de la bibliothèque :**
- stdio
- string


####################################################################### Petite liste des fonctions :

# \\ # \\ # Thème 1 : **conversion**


# int to str

char *my_inttostr(int number, char tab[]);
    int number
    char tab[]
converti un paramètre 'number' donné en chaine de caractère ascii dans le tableau.
et renvoi un pointeur sur le tableau


# str to int

int my_strtoint(char tab[]);
    char tab[]
converti une chaine de caractère contenant que des nombre, en int.
et renvoi ce nombre




# \\ # \\ # Thème 2 : **nombre**


# power

unsigned long long int my_pow(int nombre, int exposant);
    int nombre
    int exposant
le choix pour le type est fait comme ça car, certain calcul donne de très grand nombre
renvoi 'nombre' exposant 'exposant'




# \\ # \\ # Thème 3 : **std.in.out**


# input strings
void my\_lecture(char tab[], int taille_max);
    char tab[]
    int taille_max
modifie le tableau de char donné par ce que donne l'utilisateur dans stdin
(similaire à fgets car il ne prend qu'un nombre défini de caractère)


# input charactere
void my_lecture_one(char *ptr_letter);
    char *ptr_letter
modifie la valeur pointé par 'ptr_letter' par un caractère entré dans stdin


# print char
void print_char(char c);
    char c
affiche un caractère dans stdout


# print strings
void print_str(char \*tab);
    char tab[]
affiche une chaine de caractere dans stdout (une chaine de caractère doit terminer par \\0)


# print int
void print_nb(int number);
    int number
affiche une chaîne de caractère (le int est transformé en caractère ascii)


# print bonus
void print1(char *tab, void *ptr_parametre);
    char tab[]
    void *ptr_parametre
affiche une chaine de caractère, et si il y a parmis elle un
%s : prend le pointeur comme un pointeur sur une chaine de caractère et fait un print_str
%c : prend le pointeur comme un pointeur sur un caractère et fait un print_char
%d : prend le pointeur comme un pointeur sur un nombre et fait un print_nb
puis continu la chaîne de caractère




# \\ # \\ # Thème 4 : **strings**


# str_cat
void my_strcat(char tab1[], char tab2[]);
    char tab1[]
    char tab2[]
concatène la chaine de caractere 'tab1' et 'tab2' dans 'tab1'


# str_chr
char *my_strchr(char tab[], char letter);
    char tab[]
    char letter
retourne un pointeur sur l'endroit où il y a la lettre indiquée
si il n'y en a pas, retourne NULL


# str_cmp
int my_strcmp(char tab1[], char tab2[]);
    char tab1[]
    char tab2[]
compare deux chaine de caractere
renvoi 1 si les deux chaînes ne sont pas pareil, 0 si elle le sont


# str_cpy
void my_strcpy(char tab1[], char tab2[]);
    char tab1[]
    char tab2[]
copie la chaine de caractère 'tab2' dans 'tab1'


# str_len
int my_strlen(char tab[]);
    char tab[]
renvoi la longueur de la chaîne de caractère (sans compter le \0)


# str_pbrk
char *my_strpbrk(char tab[], char letters[]){
    char tab[]
    char letters[]
renvoi un pointeur sur la première lettre trouvée entre toutes celles dans 'letters'
renvoi NULL si non trouvé


# str_rev
void my_strrev(char tab[]);
    char tab[]
inverse l'ordre de la chaine de caractere


# str_str
char *my_strstr(char tab1[], char tab2[]);
    char tab1[]
    char tab2[]
renvoi un pointeur sur la première lettre de l'occurrence 'tab2' à chercher dans 'tab1'
renvoi NULL si il n'y en a pas




################################### Makefile

**1**
make help
affiche le readme anglais



**2**
make aide
affiche ce document



**3**
make init
pour créer la bibliothèque



**4**
make clean
si il reste des fichier .o



**5**
make hard_clean
pour supprimer en plus des .o (si il y en a) la bibliotheque



**6**
make use_libmy
prérequis :
-remplacer la variable NAME\_OF\_THE\_PROG par le nom du fichier à compiler avec la bibliothèque libmy
cette ligne peut aussi vous montrer comment compiler avec une bibliothèque perso

#désolé pour l'orthographe <3 (╯°□°）╯︵ ┻━┻
